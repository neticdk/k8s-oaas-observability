global:
  # -- Deploy network policy allowing ingress.
  networkPolicyEnabled: false

# -- Whether or not enable prom scrape
prometheusScrape: true

image:
  # -- The image repository to pull from
  repository: k8s.gcr.io/kube-state-metrics/kube-state-metrics
  # -- The image tag to pull - default is version from Chart.yaml
  tag:
  # -- Image pull policy
  pullPolicy: Always

imagePullSecrets: []
# - name: "image-pull-secret"

# -- Set to true to automatically shard data across replicas pods ([Automated Sharding](https://github.com/kubernetes/kube-state-metrics#automated-sharding)). EXPERIMENTAL
autosharding:
  enabled: false

# -- Number of replicas
replicas: 1

service:
  # -- The port of the container
  port: 8080
  # -- Service type. Default to clusterIP for backward compatibility.
  type: ClusterIP
  nodePort: 0
  loadBalancerIP: ""
  # -- Annotations to be added to the service.
  annotations: {}

# -- Custom labels to apply to service, deployment and pods
customLabels: {}

# -- Whether or not to use the host network
hostNetwork: false

rbac:
  # If true, create & use RBAC resources
  create: true

serviceAccount:
  # -- If true, create & use serviceAccount. Require rbac true
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # -- Reference to one or more secrets to be used when pulling images
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # -- ServiceAccount annotations.
  # Use case: AWS EKS IAM roles for service accounts
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/specify-service-account-role.html
  annotations: {}

prometheus:
  monitor:
    # -- Set this to true to create ServiceMonitor for Prometheus operator
    enabled: false
    # -- Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
    additionalLabels: {}
    # -- Namespace where servicemonitor resource should be created
    namespace: ""
    # -- Honor metric labels
    honorLabels: false

## Specify if a Pod Security Policy for kube-state-metrics must be created
## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
##
podSecurityPolicy:
  # -- If true, create & use PodSecurityPolicy resources. Note that related RBACs are created only if `rbac.enabled` is `true`.
  enabled: false
  # -- Specify pod annotations in the pod security policy
  # Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
  # Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
  # Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
  annotations: {}
    ##
    # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
    # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  # -- Specify allowed volumes in the pod security policy (`secret` is always allowed)
  additionalVolumes: []

podSecurityContext:
  # -- Group ID for the container
  runAsGroup: 65534
  # -- User ID for the container
  runAsUser: 65534
  # -- Group ID for the filesystem
  fsGroup: 65534

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

# -- Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# -- Affinity settings for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
affinity: {}

# -- Tolerations for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# -- Annotations to be added to the pod
podAnnotations: {}

# -- Name of Priority Class to assign pods
priorityClassName: "secure-cloud-stack-technical-operations-critical"

# -- Optional PodDisruptionBudget
# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}

# -- Available collectors for kube-state-metrics
collectors:
  - certificatesigningrequests
  - configmaps
  - cronjobs
  - daemonsets
  - deployments
  - endpoints
  - horizontalpodautoscalers
  - ingresses
  - jobs
  - limitranges
  - mutatingwebhookconfigurations
  - namespaces
  - networkpolicies
  - nodes
  - persistentvolumeclaims
  - persistentvolumes
  - poddisruptionbudgets
  - pods
  - replicasets
  - replicationcontrollers
  - resourcequotas
  - secrets
  - services
  - statefulsets
  - storageclasses
  - validatingwebhookconfigurations
  - volumeattachments
  # - verticalpodautoscalers # not a default resource, see also: https://github.com/kubernetes/kube-state-metrics#enabling-verticalpodautoscalers

# Enabling kubeconfig will pass the --kubeconfig argument to the container
kubeconfig:
  # -- Adds --kubeconfig arg to container at startup
  enabled: false
  # -- base64 encoded kube-config file
  secret:

# Namespace to be enabled for collecting resources. By default all namespaces are collected.
# namespace: ""

# -- Override the deployment namespace
# @default will be set to `.Release.Namespace` if it is not set
namespaceOverride: ""

# -- kube-state-metrics resource requests and limits
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: 100Mi
  requests:
    cpu: 50m
    memory: 64Mi

# -- Provide a k8s version to define apiGroups for podSecurityPolicy Cluster Role.
# For example: kubeTargetVersionOverride: 1.14.9
kubeTargetVersionOverride: ""
